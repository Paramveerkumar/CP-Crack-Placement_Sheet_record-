class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        
        //for fast i/o in c++
        ios_base::sync_with_stdio(false);
        cin.tie(NULL);
        int n=nums.size();
        if(n==0)
            return 0;
        
        unordered_map<int,int>mp;//key=prefixsum,value=count of PrefixSum
        int curr_sum=0;
        int count=0;
        int i=0;
        while(i<n)
        {
            curr_sum+=nums[i];
            
            if(curr_sum==k)
                count++;
            
            if(mp.find(curr_sum-k)!=mp.end())
                count+=mp[curr_sum-k];//ye element already map me present hai isliye increment //kr diye
            mp[curr_sum]++;
            i++;
        }
        return count;
    }
};

//By using map access element in just 0(1) using their key and we are traversing //this array just one then total complextiy is (0)N..
//SC-0(N) //Hints from Techdose
